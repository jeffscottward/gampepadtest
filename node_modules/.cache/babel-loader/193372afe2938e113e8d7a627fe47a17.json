{"ast":null,"code":"import _objectSpread from \"/Users/jeffscottward/Documents/Development/jeffscottward/gampepadtest/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport React, { createContext, useEffect, useRef, useState } from \"react\";\nexport default function useGamepads(callback) {\n  var gamepads = useRef({});\n  var requestRef = useRef();\n  var haveEvents = (\"ongamepadconnected\" in window);\n\n  var addGamepad = gamepad => {\n    // console.log(\n    //   \"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\n    //   gamepad.index,\n    //   gamepad.id,\n    //   gamepad.buttons.length,\n    //   gamepad.axes.length\n    // );\n    gamepads.current = _objectSpread(_objectSpread({}, gamepads.current), {}, {\n      [gamepad.index]: {\n        buttons: gamepad.buttons,\n        id: gamepad.id,\n        axes: gamepad.axes\n      }\n    }); // Send data to external callback (like React state)\n\n    callback(gamepads.current); // Handle controller input before render\n    // requestAnimationFrame(updateStatus);\n  };\n  /**\r\n   * Adds game controllers during connection event listener\r\n   * @param {object} e\r\n   */\n\n\n  var connectGamepadHandler = e => {\n    addGamepad(e.gamepad); // console.log(\"connecting gamepads\", e, e.gamepad);\n  };\n  /**\r\n   * Finds all gamepads and adds them to context\r\n   */\n\n\n  var scanGamepads = () => {\n    // Grab gamepads from browser API\n    var detectedGamepads = navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []; // Loop through all detected controllers and add if not already in state\n\n    for (var i = 0; i < detectedGamepads.length; i++) {\n      if (detectedGamepads[i]) {\n        addGamepad(detectedGamepads[i]);\n      }\n    }\n  }; // Add event listener for gamepad connecting\n\n\n  useEffect(() => {\n    window.addEventListener(\"gamepadconnected\", connectGamepadHandler);\n    return window.removeEventListener(\"gamepadconnected\", connectGamepadHandler);\n  }); // Update each gamepad's status on each \"tick\"\n\n  var animate = time => {\n    if (!haveEvents) scanGamepads();\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n  });\n  return gamepads.current;\n}","map":{"version":3,"sources":["/Users/jeffscottward/Documents/Development/jeffscottward/gampepadtest/src/hooks/useGamepads.js"],"names":["React","createContext","useEffect","useRef","useState","useGamepads","callback","gamepads","requestRef","haveEvents","window","addGamepad","gamepad","current","index","buttons","id","axes","connectGamepadHandler","e","scanGamepads","detectedGamepads","navigator","getGamepads","webkitGetGamepads","i","length","addEventListener","removeEventListener","animate","time","requestAnimationFrame","cancelAnimationFrame"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,MAA1C,EAAkDC,QAAlD,QAAkE,OAAlE;AAEA,eAAe,SAASC,WAAT,CAAqBC,QAArB,EAA+B;AAC5C,MAAMC,QAAQ,GAAGJ,MAAM,CAAC,EAAD,CAAvB;AACA,MAAMK,UAAU,GAAGL,MAAM,EAAzB;AAEA,MAAIM,UAAU,IAAG,wBAAwBC,MAA3B,CAAd;;AAEA,MAAMC,UAAU,GAAIC,OAAD,IAAa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AAEAL,IAAAA,QAAQ,CAACM,OAAT,mCACKN,QAAQ,CAACM,OADd;AAEE,OAACD,OAAO,CAACE,KAAT,GAAiB;AACfC,QAAAA,OAAO,EAAEH,OAAO,CAACG,OADF;AAEfC,QAAAA,EAAE,EAAEJ,OAAO,CAACI,EAFG;AAGfC,QAAAA,IAAI,EAAEL,OAAO,CAACK;AAHC;AAFnB,OAT8B,CAkB9B;;AACAX,IAAAA,QAAQ,CAACC,QAAQ,CAACM,OAAV,CAAR,CAnB8B,CAqB9B;AACA;AACD,GAvBD;AAyBA;AACF;AACA;AACA;;;AACE,MAAMK,qBAAqB,GAAIC,CAAD,IAAO;AACnCR,IAAAA,UAAU,CAACQ,CAAC,CAACP,OAAH,CAAV,CADmC,CAEnC;AACD,GAHD;AAKA;AACF;AACA;;;AACE,MAAMQ,YAAY,GAAG,MAAM;AACzB;AACA,QAAIC,gBAAgB,GAAGC,SAAS,CAACC,WAAV,GACnBD,SAAS,CAACC,WAAV,EADmB,GAEnBD,SAAS,CAACE,iBAAV,GACAF,SAAS,CAACE,iBAAV,EADA,GAEA,EAJJ,CAFyB,CAQzB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,gBAAgB,CAACK,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,UAAIJ,gBAAgB,CAACI,CAAD,CAApB,EAAyB;AACvBd,QAAAA,UAAU,CAACU,gBAAgB,CAACI,CAAD,CAAjB,CAAV;AACD;AACF;AACF,GAdD,CA3C4C,CA2D5C;;;AACAvB,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,MAAM,CAACiB,gBAAP,CAAwB,kBAAxB,EAA4CT,qBAA5C;AAEA,WAAOR,MAAM,CAACkB,mBAAP,CACL,kBADK,EAELV,qBAFK,CAAP;AAID,GAPQ,CAAT,CA5D4C,CAqE5C;;AACA,MAAMW,OAAO,GAAIC,IAAD,IAAU;AACxB,QAAI,CAACrB,UAAL,EAAiBW,YAAY;AAC7BZ,IAAAA,UAAU,CAACK,OAAX,GAAqBkB,qBAAqB,CAACF,OAAD,CAA1C;AACD,GAHD;;AAKA3B,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,UAAU,CAACK,OAAX,GAAqBkB,qBAAqB,CAACF,OAAD,CAA1C;AACA,WAAO,MAAMG,oBAAoB,CAACxB,UAAU,CAACK,OAAZ,CAAjC;AACD,GAHQ,CAAT;AAKA,SAAON,QAAQ,CAACM,OAAhB;AACD","sourcesContent":["import React, { createContext, useEffect, useRef, useState } from \"react\";\r\n\r\nexport default function useGamepads(callback) {\r\n  const gamepads = useRef({});\r\n  const requestRef = useRef();\r\n\r\n  var haveEvents = \"ongamepadconnected\" in window;\r\n\r\n  const addGamepad = (gamepad) => {\r\n    // console.log(\r\n    //   \"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\r\n    //   gamepad.index,\r\n    //   gamepad.id,\r\n    //   gamepad.buttons.length,\r\n    //   gamepad.axes.length\r\n    // );\r\n\r\n    gamepads.current = {\r\n      ...gamepads.current,\r\n      [gamepad.index]: {\r\n        buttons: gamepad.buttons,\r\n        id: gamepad.id,\r\n        axes: gamepad.axes\r\n      }\r\n    };\r\n\r\n    // Send data to external callback (like React state)\r\n    callback(gamepads.current);\r\n\r\n    // Handle controller input before render\r\n    // requestAnimationFrame(updateStatus);\r\n  };\r\n\r\n  /**\r\n   * Adds game controllers during connection event listener\r\n   * @param {object} e\r\n   */\r\n  const connectGamepadHandler = (e) => {\r\n    addGamepad(e.gamepad);\r\n    // console.log(\"connecting gamepads\", e, e.gamepad);\r\n  };\r\n\r\n  /**\r\n   * Finds all gamepads and adds them to context\r\n   */\r\n  const scanGamepads = () => {\r\n    // Grab gamepads from browser API\r\n    var detectedGamepads = navigator.getGamepads\r\n      ? navigator.getGamepads()\r\n      : navigator.webkitGetGamepads\r\n      ? navigator.webkitGetGamepads()\r\n      : [];\r\n\r\n    // Loop through all detected controllers and add if not already in state\r\n    for (var i = 0; i < detectedGamepads.length; i++) {\r\n      if (detectedGamepads[i]) {\r\n        addGamepad(detectedGamepads[i]);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Add event listener for gamepad connecting\r\n  useEffect(() => {\r\n    window.addEventListener(\"gamepadconnected\", connectGamepadHandler);\r\n\r\n    return window.removeEventListener(\r\n      \"gamepadconnected\",\r\n      connectGamepadHandler\r\n    );\r\n  });\r\n\r\n  // Update each gamepad's status on each \"tick\"\r\n  const animate = (time) => {\r\n    if (!haveEvents) scanGamepads();\r\n    requestRef.current = requestAnimationFrame(animate);\r\n  };\r\n\r\n  useEffect(() => {\r\n    requestRef.current = requestAnimationFrame(animate);\r\n    return () => cancelAnimationFrame(requestRef.current);\r\n  });\r\n\r\n  return gamepads.current;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}