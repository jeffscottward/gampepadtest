{"ast":null,"code":"import { useEffect, useRef } from \"react\";\n/**\r\n * Runs a timeout after delay ms.\r\n * \r\n * @param callback function to execute\r\n * @param delay delay time in ms\r\n * \r\n * Usage:\r\n  \r\n   useTimeout(\r\n    () => console.log(\"executed\"),\r\n    300\r\n  )\r\n */\n\nexport default function useTimeout(callback, delay) {\n  var savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n  useEffect(() => {\n    function tick() {\n      savedCallback.current && savedCallback.current();\n    }\n\n    if (delay !== null) {\n      var id = setTimeout(tick, delay);\n      return () => clearTimeout(id);\n    }\n  }, [delay]);\n}","map":{"version":3,"sources":["/Users/jeffscottward/Documents/Development/jeffscottward/gampepadtest/src/hooks/useTimeout.js"],"names":["useEffect","useRef","useTimeout","callback","delay","savedCallback","current","tick","id","setTimeout","clearTimeout"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,KAA9B,EAAqC;AAClD,MAAMC,aAAa,GAAGJ,MAAM,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,aAAa,CAACC,OAAd,GAAwBH,QAAxB;AACD,GAFQ,CAAT;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACd,aAASO,IAAT,GAAgB;AACdF,MAAAA,aAAa,CAACC,OAAd,IAAyBD,aAAa,CAACC,OAAd,EAAzB;AACD;;AAED,QAAIF,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAMI,EAAE,GAAGC,UAAU,CAACF,IAAD,EAAOH,KAAP,CAArB;AACA,aAAO,MAAMM,YAAY,CAACF,EAAD,CAAzB;AACD;AACF,GATQ,EASN,CAACJ,KAAD,CATM,CAAT;AAUD","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n/**\r\n * Runs a timeout after delay ms.\r\n * \r\n * @param callback function to execute\r\n * @param delay delay time in ms\r\n * \r\n * Usage:\r\n  \r\n   useTimeout(\r\n    () => console.log(\"executed\"),\r\n    300\r\n  )\r\n */\r\nexport default function useTimeout(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  });\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current && savedCallback.current();\r\n    }\r\n\r\n    if (delay !== null) {\r\n      const id = setTimeout(tick, delay);\r\n      return () => clearTimeout(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}