{"ast":null,"code":"import _slicedToArray from \"/Users/jeffscottward/Documents/Development/jeffscottward/gampepadtest/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jeffscottward/Documents/Development/jeffscottward/gampepadtest/src/components/GameScreen.jsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport useGamepads from \"../hooks/useGamepads\";\nimport useTimeout from \"../hooks/useTimeout\";\nimport useInterval from \"../hooks/useInterval\";\nimport Countdown from \"./Countdown\";\nvar GAME_DURATION = 30;\nvar PLAYER_POSITION_ADJUST = 1;\n\nvar calculateScore = currentPosition => {\n  // Full score is 100 points\n  // Gets reduced for the bigger difference\n  // between starting position (500) and current\n  var difference = 500 - currentPosition;\n  var normalizedDiff = Math.sign(difference) === -1 ? difference * -1 : difference;\n  var score = 100 - normalizedDiff * 100 / 500;\n  return score;\n};\n\nexport default function GameScreen({\n  setGameStarted\n}) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      started = _useState2[0],\n      setStarted = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      gameOver = _useState4[0],\n      setGameOver = _useState4[1];\n\n  var position = useRef(500);\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      score = _useState6[0],\n      setScore = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      gamepads = _useState8[0],\n      setGamepads = _useState8[1];\n\n  useGamepads(gamepads => setGamepads(gamepads)); // Starts game after 3 second countdown\n\n  useTimeout(() => setStarted(true), 3000); // Ends game after 30 seconds (+ 3 seconds for pre)\n\n  useTimeout(() => {\n    setStarted(false);\n    setGameOver(true);\n  }, GAME_DURATION * 1000 + 3000);\n\n  var endGameHandler = () => {\n    setGameStarted(false);\n  };\n\n  var increasePosition = () => {\n    position.current = position.current + PLAYER_POSITION_ADJUST;\n  };\n\n  var decreasePosition = () => {\n    var newPosition = position.current - PLAYER_POSITION_ADJUST;\n    position.current = newPosition > 0 ? newPosition : 0;\n  }; // Check for button input to change position\n\n\n  useEffect(() => {\n    if (started) {\n      // If controller connected with buttons\n      if (gamepads && gamepads[0] && gamepads[0].buttons.length > 0) {\n        // Pressed Up\n        if (gamepads[0].buttons[12] && gamepads[0].buttons[12].pressed) {\n          // AwesomeDebouncePromise(() => increasePosition(), 300);\n          increasePosition();\n        } // Pressed Down\n\n\n        if (gamepads[0].buttons[12] && gamepads[0].buttons[13].pressed) {\n          // AwesomeDebouncePromise(() => decreasePosition(), 300);\n          decreasePosition();\n        } // Handle axes\n\n\n        if (\"axes\" in gamepads[0]) {\n          // Each analog stick is an \"axe\"\n          // Axes are delivered in a array of 2 numbers per axe\n          // The first is left and right\n          // The second is top and bottom\n          // If a number is -1 or 1, it's one side or the other\n          // Up\n          -0.2 > gamepads[0].axes[1] > 0.2 && increasePosition(); // Down\n\n          0.2 > gamepads[0].axes[1] < 0.2 && decreasePosition();\n        }\n      }\n    }\n\n    if (gameOver) {\n      if (gamepads && gamepads[0] && gamepads[0].buttons.length > 0) {\n        gamepads[0].buttons.forEach(button => {\n          if (button.pressed) {\n            setGameStarted(false);\n          }\n        });\n      }\n    }\n  }, [gamepads, started]); // Make position drop every second\n  // useInterval(() => {\n  //   if (started) {\n  //     const newPosition = position.current - 10;\n  //     position.current = newPosition > 0 ? newPosition : 0;\n  //     setScore((prevScore) =>\n  //       Math.round(prevScore + calculateScore(position.current))\n  //     );\n  //   }\n  // }, 1000);\n  // Game over screen\n\n  if (gameOver) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, \"Game over!\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, \"Final score: \", score), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: endGameHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, \"Try again\"));\n  } // Game is running\n\n\n  if (started) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, \"Position: \", position.current), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }\n    }, \"Score: \", score), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, \"Time left: \", /*#__PURE__*/React.createElement(Countdown, {\n      start: GAME_DURATION,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 22\n      }\n    })));\n  } // Countdown to game\n\n\n  return /*#__PURE__*/React.createElement(Countdown, {\n    start: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/Users/jeffscottward/Documents/Development/jeffscottward/gampepadtest/src/components/GameScreen.jsx"],"names":["React","useState","useEffect","useRef","useGamepads","useTimeout","useInterval","Countdown","GAME_DURATION","PLAYER_POSITION_ADJUST","calculateScore","currentPosition","difference","normalizedDiff","Math","sign","score","GameScreen","setGameStarted","started","setStarted","gameOver","setGameOver","position","setScore","gamepads","setGamepads","endGameHandler","increasePosition","current","decreasePosition","newPosition","buttons","length","pressed","axes","forEach","button"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport useGamepads from \"../hooks/useGamepads\";\r\nimport useTimeout from \"../hooks/useTimeout\";\r\nimport useInterval from \"../hooks/useInterval\";\r\nimport Countdown from \"./Countdown\";\r\n\r\nconst GAME_DURATION = 30;\r\nconst PLAYER_POSITION_ADJUST = 1;\r\n\r\nconst calculateScore = (currentPosition) => {\r\n  // Full score is 100 points\r\n  // Gets reduced for the bigger difference\r\n  // between starting position (500) and current\r\n  const difference = 500 - currentPosition;\r\n  const normalizedDiff =\r\n    Math.sign(difference) === -1 ? difference * -1 : difference;\r\n  const score = 100 - (normalizedDiff * 100) / 500;\r\n  return score;\r\n};\r\n\r\nexport default function GameScreen({ setGameStarted }) {\r\n  const [started, setStarted] = useState(false);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const position = useRef(500);\r\n  const [score, setScore] = useState(0);\r\n  const [gamepads, setGamepads] = useState({});\r\n  useGamepads((gamepads) => setGamepads(gamepads));\r\n\r\n  // Starts game after 3 second countdown\r\n  useTimeout(() => setStarted(true), 3000);\r\n  // Ends game after 30 seconds (+ 3 seconds for pre)\r\n  useTimeout(() => {\r\n    setStarted(false);\r\n    setGameOver(true);\r\n  }, GAME_DURATION * 1000 + 3000);\r\n\r\n  const endGameHandler = () => {\r\n    setGameStarted(false);\r\n  };\r\n\r\n  const increasePosition = () => {\r\n    position.current = position.current + PLAYER_POSITION_ADJUST;\r\n  };\r\n  const decreasePosition = () => {\r\n    const newPosition = position.current - PLAYER_POSITION_ADJUST;\r\n    position.current = newPosition > 0 ? newPosition : 0;\r\n  };\r\n\r\n  // Check for button input to change position\r\n  useEffect(() => {\r\n    if (started) {\r\n      // If controller connected with buttons\r\n      if (gamepads && gamepads[0] && gamepads[0].buttons.length > 0) {\r\n        // Pressed Up\r\n        if (gamepads[0].buttons[12] && gamepads[0].buttons[12].pressed) {\r\n          // AwesomeDebouncePromise(() => increasePosition(), 300);\r\n          increasePosition();\r\n        }\r\n        // Pressed Down\r\n        if (gamepads[0].buttons[12] && gamepads[0].buttons[13].pressed) {\r\n          // AwesomeDebouncePromise(() => decreasePosition(), 300);\r\n          decreasePosition();\r\n        }\r\n\r\n        // Handle axes\r\n        if (\"axes\" in gamepads[0]) {\r\n          // Each analog stick is an \"axe\"\r\n          // Axes are delivered in a array of 2 numbers per axe\r\n          // The first is left and right\r\n          // The second is top and bottom\r\n          // If a number is -1 or 1, it's one side or the other\r\n\r\n          // Up\r\n          -0.2 > gamepads[0].axes[1] > 0.2 && increasePosition();\r\n          // Down\r\n          0.2 > gamepads[0].axes[1] < 0.2 && decreasePosition();\r\n        }\r\n      }\r\n    }\r\n    if (gameOver) {\r\n      if (gamepads && gamepads[0] && gamepads[0].buttons.length > 0) {\r\n        gamepads[0].buttons.forEach((button) => {\r\n          if (button.pressed) {\r\n            setGameStarted(false);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }, [gamepads, started]);\r\n\r\n  // Make position drop every second\r\n  // useInterval(() => {\r\n  //   if (started) {\r\n  //     const newPosition = position.current - 10;\r\n  //     position.current = newPosition > 0 ? newPosition : 0;\r\n  //     setScore((prevScore) =>\r\n  //       Math.round(prevScore + calculateScore(position.current))\r\n  //     );\r\n  //   }\r\n  // }, 1000);\r\n\r\n  // Game over screen\r\n  if (gameOver) {\r\n    return (\r\n      <div>\r\n        <h1>Game over!</h1>\r\n        <h3>Final score: {score}</h3>\r\n        <button onClick={endGameHandler}>Try again</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Game is running\r\n  if (started) {\r\n    return (\r\n      <div>\r\n        <h1>Position: {position.current}</h1>\r\n        <h3>Score: {score}</h3>\r\n        <h5>\r\n          Time left: <Countdown start={GAME_DURATION} />\r\n        </h5>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Countdown to game\r\n  return <Countdown start={3} />;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}